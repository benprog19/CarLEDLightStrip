#include <FastLED.h>
#include <OneButton.h>

#define NUM_LEDS 35
#define DATA_PIN 9
#define LIGHT_PIN 8
#define BUTTON_PIN 2
#define BRIGHTNESS 255

CRGB leds[NUM_LEDS];
OneButton button(BUTTON_PIN, true);

void setup() {
  Serial.begin(9600);
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
  pinMode(BUTTON_PIN, INPUT);
  button.attachPressStart(pressButton);
  pinMode(LIGHT_PIN, OUTPUT);
  digitalWrite(LIGHT_PIN, LOW);
  FastLED.setBrightness(BRIGHTNESS);
  Serial.println("Loading red forward...");
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB(255,0,0);
    FastLED.show();
    delay(50);
  }
  delay(1000);
  Serial.println("Loading red backward...");
  for (int i = NUM_LEDS-1; i >= 0; i--) {
    leds[i] = CRGB(0,0,0);
    FastLED.show();
    delay(50);
  }
  FastLED.setBrightness(BRIGHTNESS);
  digitalWrite(LIGHT_PIN, HIGH);
}

unsigned long previousTimeLED = millis();
unsigned long previousTimeButton = millis();

long timeIntervalLED = 40;
long timeIntervalButton = 50;

int positionLED = 0;
int brightness = BRIGHTNESS;
boolean forward = true;
int colorNumber = 0;

int previousButtonState = LOW;
int buttonState = LOW;

void loop() {
  unsigned long currentTime = millis();
  if(currentTime - previousTimeLED > timeIntervalLED) {
    previousTimeLED = currentTime;
    if (forward) {
      FastLED.setBrightness(BRIGHTNESS);
      setColor(colorNumber, positionLED);
      FastLED.show();
      positionLED++;
      if (positionLED == NUM_LEDS) {
        forward = false;
      }
    } else {
      for (int i = 0; i < NUM_LEDS; i++) {
        setColor(colorNumber, i);
      }
      FastLED.setBrightness(brightness);
      brightness = brightness - 4;
      FastLED.show();
      if (brightness <= 10) {
        for (int i = 0; i < NUM_LEDS; i++) {
          leds[i] = CRGB(0,0,0);
        }
        FastLED.show();
        positionLED = 0;
        brightness = BRIGHTNESS;
        forward = true;
      }
    }
  }
  buttonState = digitalRead(BUTTON_PIN);
  if (currentTime - previousTimeButton > timeIntervalButton) {
    if (buttonState == HIGH) {
      Serial.println("HIGH");
    } else if (buttonState == LOW) {
      Serial.println("LOW");
    }
    previousTimeButton = currentTime;
    buttonState = digitalRead(BUTTON_PIN);
    if (previousButtonState == LOW && buttonState == HIGH) {
        Serial.println("Button press");
        if (colorNumber >= 9) {
          colorNumber = 0;
        } else {
          colorNumber++;
        }
    }
    previousButtonState = buttonState;
  }
}

void setColor(int num, int pLED) {
  if (num == 0) {
    leds[pLED] = CRGB(255,0,0); // red
  } else if (num == 1) {
    leds[pLED] = CRGB(252, 207, 3); // yellow
  } else if (num == 2) {
    leds[pLED] = CRGB(144, 252, 3); // lime
  } else if (num == 4) {
    leds[pLED] = CRGB(0, 255, 0); // green 
  } else if (num == 5) {
    leds[pLED] = CRGB(3, 252, 215); // aqua
  } else if (num == 6) {
    leds[pLED] = CRGB(0, 0, 255); // blue
  } else if (num == 7) {
    leds[pLED] = CRGB(198, 3, 252); // violet
  } else if (num == 8) {
    leds[pLED] = CRGB(255, 0, 217); // pink
  } else if (num == 9) {
    leds[pLED] = CRGB(255, 255, 255); // white
  } else {
    leds[pLED] = CRGB(0, 0, 0); // black
  }
  
}

void pressButton() {
  if (colorNumber+1 < 10) {
    colorNumber++;
  } else {
    colorNumber == -1;
  }
}
