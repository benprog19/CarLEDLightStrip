#include <FastLED.h>
#include <OneButton.h>

#define NUM_LEDS 25
#define DATA_PIN 9
#define LIGHT_PIN 8
#define BUTTON_PIN 2
#define BRIGHTNESS 200

CRGB leds[NUM_LEDS];
OneButton button(BUTTON_PIN, true);

void setup() {
  Serial.begin(9600);
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
  pinMode(BUTTON_PIN, INPUT);
  button.attackPressStart(pressButton);
  pinMode(LIGHT_PIN, OUTPUT);
  digitalWrite(LIGHT_PIN, LOW);
  FastLED.setBrightness(BRIGHTNESS);
  Serial.println("Loading red forward...");
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CRGB(255,0,0);
    FastLED.show();
    delay(50);
  }
  delay(1000);
  Serial.println("Loading red backward...");
  for (int i = NUM_LEDS-1; i >= 0; i--) {
    leds[i] = CRGB(0,0,0);
    FastLED.show();
    delay(50);
  }
  FastLED.setBrightness(BRIGHTNESS);
  digitalWrite(LIGHT_PIN, HIGH);
}

unsigned long previousTimeLED = millis();
unsigned long previousTimeButton = millis();

long timeIntervalLED = 50;
long timeIntervalButton = 100;

int positionLED = 0;
int brightness = BRIGHTNESS;
boolean forward = true;
int colorNumber = -1;

int previousButtonState = -1;
int buttonState = 0;

void loop() {
  unsigned long currentTime = millis();
  if(currentTime - previousTimeLED > timeIntervalLED) {
    previousTimeLED = currentTime;
    if (forward) {
      int *color = getColorNumber(colorNumber);
      leds[positionLED] = CRGB(color[0], color[1], color[2]);
      FastLED.show();
      positionLED++;
      if (positionLED == NUM_LEDS) {
        forward = false;
      }
    } else {
      FastLED.setBrightness(brightness);
      brightness = brightness - 2;
      FastLED.show();
      if (brightness <= 10) {
        for (int i = 0; i < NUM_LEDS; i++) {
          leds[i] = CRGB(0,0,0);
        }
        FastLED.show();
        positionLED = 0;
        brightness = BRIGHTNESS;
        forward = true;
      }
    }
  }
  button.tick();
//  buttonState = digitalRead(BUTTON_PIN);
//  if (buttonState != previousButtonState) {
//    Serial.println("Button press.");
//    previousButtonState = buttonState;
//  }
//  if (currentTime - previousTimeButton > timeIntervalButton) {
//    previousTimeButton = currentTime;
//    buttonState = digitalRead(BUTTON_PIN);
//    if (buttonState != previousButtonState) {
//      if (buttonState == HIGH) {
//        Serial.println("Button press");
//        colorNumber++;
//      }
//    }
//    previousButtonState = buttonState;
//  }
}

int *getColorNumber(int num) {
  int colors[3];
  colors[0] = 0;
  colors[1] = 0;
  colors[2] = 0;
  if (num == 0) { 
    colors[0] = 255;
  } else if (num == 1) {
    colors[1] = 255;
  } else if (num == 2) {
    colors[2] = 255;
  }
  return colors;
}

void pressButton() {
  if (colorNumber+1 < 10) {
    colorNumber++;
  } else {
    colorNumber == -1;
  }
}
